/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.IndexCard;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-06-27T14:18:57.858700547Z[GMT]")
@Validated
public interface IndexCardsApi {

    @Operation(summary = "delete specified card", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "index-cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successfully deleted card"),
        
        @ApiResponse(responseCode = "404", description = "Card not found") })
    @RequestMapping(value = "/index-cards/{cardId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> indexCardsCardIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cardId") UUID cardId
);


    @Operation(summary = "Get a specific card from the database", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "index-cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully pulled the requested card", content = @Content(mediaType = "application/json", schema = @Schema(implementation = IndexCard.class))),
        
        @ApiResponse(responseCode = "404", description = "Card not found") })
    @RequestMapping(value = "/index-cards/{cardId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IndexCard> indexCardsCardIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cardId") UUID cardId
);


    @Operation(summary = "update specified card", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "index-cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successfully updated selected card", content = @Content(mediaType = "application/json", schema = @Schema(implementation = IndexCard.class))) })
    @RequestMapping(value = "/index-cards/{cardId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<IndexCard> indexCardsCardIdPatch(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("cardId") UUID cardId
, @Parameter(in = ParameterIn.DEFAULT, description = "New information to update card", required=true, schema=@Schema()) @Valid @RequestBody IndexCard body
);


    @Operation(summary = "get all cards from the collection", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "index-cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully pulled all cards from collection", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IndexCard.class)))) })
    @RequestMapping(value = "/index-cards/{collectionId}/index-cards",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<IndexCard>> indexCardsCollectionIdIndexCardsGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("collectionId") UUID collectionId
);


    @Operation(summary = "Create a new index card for the selected collection", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "index-cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successfully created card", content = @Content(mediaType = "application/json", schema = @Schema(implementation = IndexCard.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal server error") })
    @RequestMapping(value = "/index-cards/{collectionId}/index-cards",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<IndexCard> indexCardsCollectionIdIndexCardsPost(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("collectionId") UUID collectionId
, @Parameter(in = ParameterIn.DEFAULT, description = "content of the index card", required=true, schema=@Schema()) @Valid @RequestBody IndexCard body
);


    @Operation(summary = "get all cards of the logged in user", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "index-cards" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successfully pulled the users cards", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IndexCard.class)))) })
    @RequestMapping(value = "/index-cards/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<IndexCard>> indexCardsUserIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") UUID userId
);

}

